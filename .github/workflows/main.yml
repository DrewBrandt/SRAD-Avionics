name: Manage Linked Issues Based on PR Events

on:
  pull_request:
    types: [opened, reopened, review_requested]

  pull_request_review:
    types: [submitted]

jobs:
  update-linked-issues:
    runs-on: ubuntu-latest

    steps:
      - name: Print Debug Information
        run: |
          echo "PR ID: ${{ github.event.pull_request.node_id }}"
          echo "PR Number: ${{ github.event.pull_request.number }}"
          echo "PR Event: ${{ github.event.action }}"
          echo "PR Review State: ${{ github.event.pull_request_review.state }}"

      # Step 1: Get the project ID dynamically
      - name: Fetch Project ID
        env:
          GH_TOKEN: ${{ secrets.TEST }}  # Use organization token
        run: |
          # Correctly set the project name and retrieve the project ID dynamically
          project_name="@DrewBrandt's test project"  # Replace with the actual project name
          project_id=$(gh api graphql -f query='
            query {
             # organization(login: $login) {
                projectsV2(first: 10) {
                  nodes {
                     id
                     title
                   }
                # }
               }
             }' --jq '.data.organization.projectsV2.nodes[] | select(.title == "'"$project_name"'") | .id')

           # Print the retrieved project ID and save it to the environment for future steps
           echo "PROJECT_ID=$project_id" >> $GITHUB_ENV
           echo "Project ID: $project_id"

      # Step 2: Fetch the Status Field ID and Option IDs
      - name: Fetch Status Field ID and Option IDs
        env:
          GH_TOKEN: ${{ secrets.TEST }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
        run: |
          status_field_name="Status"  # Replace with the actual name of the status field
          ready_status_name="Ready"
          requires_changes_status_name="Requires Changes"

          # Fetch the Status Field ID
          status_field_id=$(gh api graphql -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first: 10) {
                  nodes {
                  ... on ProjectV2SingleSelectField {
                    id
                    name
                    options {
                      id
                      name
                      }
                    }
                  }
                }
              }
            }
          }' -f projectId=$PROJECT_ID --jq '.data.node.fields.nodes[] | select(.name == "'$status_field_name'") | .id')

          echo "STATUS_FIELD_ID=$status_field_id" >> $GITHUB_ENV
          echo "Status Field ID: $status_field_id"

          # Fetch the Option IDs for "Ready" and "Requires Changes"
          ready_option_id=$(gh api graphql -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first: 10) {
                  nodes {
                  ... on ProjectV2SingleSelectField {
                    options {
                      id
                      name
                      }
                    }
                  }
                }
              }
            }
          }' -f projectId=$PROJECT_ID --jq '.data.node.fields.nodes[] | select(.name == "'$status_field_name'").options[] | select(.name == "'$ready_status_name'") | .id')

          requires_changes_option_id=$(gh api graphql -f query='
          query($projectId: ID!) {
            node(id: $projectId) {
              ... on ProjectV2 {
                fields(first: 10) {
                  nodes {
                  ... on ProjectV2SingleSelectField {
                    options {
                      id
                      name
                    }
                  }
                  }
                }
              }
            }
          }' -f projectId=$PROJECT_ID --jq '.data.node.fields.nodes[] | select(.name == "'$status_field_name'").options[] | select(.name == "'$requires_changes_status_name'") | .id')

          echo "READY_OPTION_ID=$ready_option_id" >> $GITHUB_ENV
          echo "REQUIRES_CHANGES_OPTION_ID=$requires_changes_option_id" >> $GITHUB_ENV
          echo "Ready Option ID: $ready_option_id"
          echo "Requires Changes Option ID: $requires_changes_option_id"

      # Step 3: Fetch linked issues and update their status
      - name: Fetch Linked Issues and Set Status
        env:
          GH_TOKEN: ${{ secrets.TEST }}
          PROJECT_ID: ${{ env.PROJECT_ID }}
          STATUS_FIELD_ID: ${{ env.STATUS_FIELD_ID }}
          READY_OPTION_ID: ${{ env.READY_OPTION_ID }}
          REQUIRES_CHANGES_OPTION_ID: ${{ env.REQUIRES_CHANGES_OPTION_ID }}
        run: |
          # Retrieve the linked issues using GraphQL
          linked_issues=$(gh api graphql -f query='
            query($pr:ID!) {
              node(id: $pr) {
                ... on PullRequest {
                  closingIssuesReferences(first: 10) {
                    nodes {
                      id
                      number
                      projectItems(first: 5) {
                        nodes {
                          id
                        }
                      }
                    }
                  }
                }
              }
            }' -f pr=${{ github.event.pull_request.node_id }} --jq '.data.node.closingIssuesReferences.nodes')

          # Print the retrieved issues for debugging
          echo "Linked Issues: $linked_issues"

          # Prepare an empty variable to hold all issue IDs
          all_linked_issues=""

          # Use jq to directly iterate over the JSON array and append issue IDs
          for issue_id in $(echo "$linked_issues" | jq -r '.[].projectItems.nodes[0].id'); do
            all_linked_issues="$all_linked_issues $issue_id"
          done

          # Print the collected issue IDs for debugging
          echo "Collected Linked Issue IDs: $all_linked_issues"

          # Determine the correct status based on the event type
          if [[ "${{ github.event.action }}" == "opened" ]] || [[ "${{ github.event.action }}" == "review_requested" ]] || [[ "${{ github.event.action }}" == "reopened" ]]; then
            status_option_id=$READY_OPTION_ID
            echo "Setting status to 'Ready'"
          elif [[ "${{ github.event.pull_request_review.state }}" == "changes_requested" ]]; then
            status_option_id=$REQUIRES_CHANGES_OPTION_ID
            echo "Setting status to 'Requires Changes'"
          else
            echo "No valid event type for status update."
            exit 1
          fi

          # Loop through each linked issue and update the status
          for issue_id in $all_linked_issues; do
            if [ -n "$issue_id" ]; then
              echo "Updating status for issue ID: $issue_id"
              gh api graphql -f query='
              mutation($issueId:ID!, $projectId:ID!) {
                updateProjectV2ItemFieldValue(input: {projectId: $projectId, fieldId: "${{env.STATUS_FIELD_ID}}", itemId: $issueId, value: {singleSelectOptionId: "'$status_option_id'"}}) {
                  projectV2Item {
                    type
                    updatedAt
                  }
                }
              }' -f issueId=$issue_id -f projectId=$PROJECT_ID
            fi
          done
